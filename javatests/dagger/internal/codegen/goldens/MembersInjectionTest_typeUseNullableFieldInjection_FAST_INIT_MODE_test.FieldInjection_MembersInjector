package test;

import dagger.MembersInjector;
import dagger.internal.DaggerGenerated;
import dagger.internal.InjectedFieldSignature;
import dagger.internal.QualifierMetadata;
import javax.annotation.processing.Generated;
import javax.inject.Provider;

@QualifierMetadata
@DaggerGenerated
@Generated(
    value = "dagger.internal.codegen.ComponentProcessor",
    comments = "https://dagger.dev"
)
@SuppressWarnings({
    "unchecked",
    "rawtypes",
    "KotlinInternal",
    "KotlinInternalInJava",
    "cast",
    "deprecation"
})
public final class FieldInjection_MembersInjector implements MembersInjector<FieldInjection> {
  private final Provider<String> stringProvider;

  public FieldInjection_MembersInjector(Provider<String> stringProvider) {
    this.stringProvider = stringProvider;
  }

  public static MembersInjector<FieldInjection> create(Provider<String> stringProvider) {
    return new FieldInjection_MembersInjector(stringProvider);
  }

  @Override
  public void injectMembers(FieldInjection instance) {
    injectString(instance, stringProvider.get());
  }

  @InjectedFieldSignature("test.FieldInjection.string")
  public static void injectString(Object instance, String string) {
    ((FieldInjection) instance).string = string;
  }
}
